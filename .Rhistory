library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(KernSmooth)
install.packages(kernsmooth)
install.packages("KernSmooth")
library(KernSmooth)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(30)
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
install.packackes("swirl")
install.packages("swirl")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[ , 11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flag,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, sapply)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?tapply
rm(c(flag_colors, flag_shapes, flag_colors))
rm(c("flag_colors", "flag_shapes"))
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInv()
if(!is.null(i)){
message("returning cached matrix inverse")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInv(i)
i
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
m <<- y
i <<- NULL
}
get <- function() m
setInv <- function(inv) i <<- inv
getInv <- function() i
list(set = set, get = get,
setInv = setInv, getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getInv()
if(!is.null(i)){
message("returning cached matrix inverse")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setInv(i)
i
}
m <- matrix(c(1,3,9,3,9,3,9,3,1),nrow=3,ncol=3)
makeCacheMatrix(m)
mMatrix <- makeCacheMatrix(m)
cacheSolve(mMatrix)
cacheSolve(mMatrix)
makeCacheMatrix()
m <- makeCacheMatrix()
m
m$get
m <- matrix(c(1,3,9,3,9,3,9,3,1),nrow=3,ncol=3)
m$get
m$get()
m <- makeCacheMatrix(m)
m$get
m$get()
m
m$get
m <- matrix(c(1,3,9,3,9,3,9,3,1),nrow=3,ncol=3)
makeCacheMatrix(m)
mMatrix<-makeCacheMatrix(m)
mMatrix$get
mMatrix$get()
empty <- makeCacheMatrix()
empty$get
empty$get()
environment(x)
environment(m)
nchar("cd051b6eded4ea36bcf3ed88c2efd8441e47e2db")
library(datasets)
data(iris)
?iris
iris
lapply(iris,class)
dim(iris)
mean(iris$Sepal.Length)
mean(iris$Sepal.Length, na.rm=F)
mean(iris$Sepal.Length, na.rm=T)
apply(iris,mean)
apply
?apply
apply(iris,1:4,mean)
apply(iris, 2, mean)
lapply(iris,mean)
apply(iris,1,mean)
apply(iris,2,mean)
apply(iris[1:4,],2,mean)
apply(iris[1:4,],1,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:4],1,mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
lapply(mtcars,class)
sapply(mtcars,class)
split(mtcars,mpg)
split(mtcars,mtcars$mpg)
x<-split(mtcars,mtcars$mpg)
x
rm(x)
split(mtcars,2)
?split
split(mtcars,mtcars$cyl)
sapply(split(mtcars,mtcars$cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
cylMean<-sapply(split(mtcars$mpg,mtcars$cyl),mean)
cylMean
cylMean$4
cylMean[1]
cylMean[3]-cylMean[1]
debug(ls)
ls
exit()
debug(ls)
ls()
library(datasets)
data(iris)
split(iris$Sepal.Length,"virginica")
mean(split(iris$Sepal.Length,"virginica"))
mean(split(iris$Sepal.Length,"virginica"), rm.na=F)
split(iris$Sepal.Length,"virginica")
vtemp<-split(iris$Sepal.Length,"virginica")
vtemp
mean(vtemp)
class(vtemp)
sapply(split(iris$Sepal.Length,"virginica"),mean)
sapply(iris$Sepal.Length,mean,na.rm=F)
vtemp<-iris[iris$Species=="virginica",iris$Sepal.Length]
vtemp<-iris[iris$Species=="virginica","Sepal.Length"]
vtemp
mean(vtemp)
View(iris)
split(iris,iris$Species)
as.factors(iris$Species)
levels(iris$Species)
split(iris$Sepal.Length,levels(iris$Species))
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean)
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean,na.rm=F)
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean,na.rm=T)
iris[iris$Species=="virginica",]
virginoca<-iris[iris$Species=="virginica",]
virginoca$Sepal.Length
mean(virginoca$Sepal.Length)
summary(virginoca$Sepal.Length)
sapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
apply(split(iris$Sepal.Length,levels(iris$Species)),summary)
lapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hpCyl<-tapply(mtcars$hp, mtcars$cyl, mean)
hpCyl[3]-hpCyl[1]
hpCyl
hpCyl[1]
hpCyl[3]
abs(hpCyl[3]-hpCyl[1])
tapply(iris$Sepal.Length,iris$Species)
tapply(mean,iris$Sepal.Length,iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
sapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
mean(virginoca$Sepal.Length)
mean(iris[iris$Species=="virginica",])
mean(iris[iris$Species=="virginica","Sepal.Length"])
sapply(split(iris$Sepal.Length,levels(iris$Species)),mean)
lapply(split(iris$Sepal.Length,levels(iris$Species)),summary)
lapply(split(iris$Sepal.Length,levels(iris$Species)),mean)
install.packages("xslx")
get.data <- function() {
zipname <- "repdata-data-acitivity.zip"
filename <- "activity.csv"
if(!file.exists(filename)) {
if(!file.exists(zipname))
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", zipname)
unzip(zipname, exdir = ".")
}
read.csv(filename, header = T)
}
activity <- get.data()
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
setwd("~/Google Drive/Education/Coursera/represearch")
get.data <- function() {
zipname <- "repdata-data-acitivity.zip"
filename <- "activity.csv"
if(!file.exists(filename)) {
if(!file.exists(zipname))
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", zipname)
unzip(zipname, exdir = ".")
}
read.csv(filename, header = T)
}
activity <- get.data()
library(dplyr)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
daily_steps <- activity %>% group_by(date) %>% summarise(total_steps = sum(steps, na.rm = T))
daily_steps$date <- strptime(daily_steps$date, "%Y-%m-%d")
# 2. If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d"), geom="histogram")
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d"))
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_line()
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(date), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
qplot(daily_steps, aes(date), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(date), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_bar()
ggplot(daily_steps, aes(total_steps))
qplot(daily_steps, aes(total_steps), geom = "histogram")
ggplot(daily_steps, aes(total_steps), geom = "histogram")
geom_histogram()
histogram
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d"), geom="histogram")
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d"))
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_line()
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(date), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
qplot(daily_steps, aes(date), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
summary <- activity %>% group_by(date) %>% summarise(median = median(steps, na.rm = T), mean = mean(steps, na.rm = T))
summary
View(daily_steps)
mean(daily_steps$total_steps)
median(daily_steps$total_steps)
View(activity)
tof_steps <- activity %>% group_by(interval) %>% summarise(average_steps = mean(steps, na.rm = T))
tof_steps <- activity %>% group_by(interval) %>% summarise(average_steps = mean(steps, na.rm = T))
View(tof_steps)
ggplot(tof_steps, aes(interval, average_steps), geom="l")
ggplot(tof_steps, aes(interval, average_steps), geom="line")
ggplot(tof_steps, aes(interval, average_steps))
qplot(tof_steps, aes(interval, average_steps))
ggplot(daily_steps, aes(date, total_steps), scale_x_date(format = "%Y-%m-%d"), geom="histogram")
> ggplot(daily_steps, aes(total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(total_steps), scale_x_date(format = "%Y-%m-%d")) + geom_histogram()
ggplot(daily_steps, aes(total_steps), geom="histogram")
ggplot(daily_steps, aes(total_steps)) + geom_histogram()
ggplot(tof_steps, aes(interval, average_steps)) + geom_smooth()
ggplot(tof_steps, aes(interval, average_step))
ggplot(tof_steps, aes(interval, average_step))
ggplot(tof_steps, aes(interval, average_steps))
ggplot(tof_steps, aes(interval, average_steps)) + geom_histogram()
ggplot(tof_steps, aes(interval, average_steps), geom = "l")
plot(interval, average_steps, data = tof_steps, type = "l")
plot(tof_steps$interval, tof_steps$average_steps, type = "l")
plot(tof_steps$interval, tof_steps$average_steps, type = "l", xlab = "5-min Interval", ylab = "Average Steps")
which(max(tof_steps$average_steps))
which(tof_steps$average_steps == max(tof_steps$average_steps))
tof_steps[which(tof_steps$average_steps == max(tof_steps$average_steps)), tof_steps$interval]
max(tof_steps$average_steps)
which(tof_steps$average_steps == max(tof_steps$average_steps))
tof_steps[which(tof_steps$average_steps == max(tof_steps$average_steps)), "interval"]
tof_steps[which(tof_steps$average_steps == max(tof_steps$average_steps)), "interval"]
filter(tof_steps, average_steps == max(average_steps))
filter(activity, is.na(steps))
nrows(filter(activity, is.na(steps)))
nrow(filter(activity, is.na(steps)))
filter(activity, is.na(steps)) %>% group_by(date)
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = nrow(filter(activity, is.na(steps))))
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = nrow(is.na(steps)))
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = nrow((steps)))
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = nrow())
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = count(steps))
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = count(intervals))
filter(activity, is.na(steps)) %>% group_by(date) %>% summarise(entries = count(interval))
View(tof_steps)
2355 / 5
2355/288
0/5+1
2355/5+1
100/5
View(activity)
filter(tof_steps, average_steps == max(average_steps))
?lappy
?lappy
?lapply
lapply(activity$steps, mean)
lapply(activity, function(x) {
if is.na(x$steps)
filter(tof_steps, interval == x$interval, average_steps)
})
apply(activity, function(x) {
if is.na(x$steps)
filter(tof_steps, interval == x$interval, average_steps)
})
filter(tof_steps, interval == x$interval)
activity[1, "steps"]
activity[12323, "steps"]
fill_na <- function(x) {
for (i in 1:nrow(x)) {
if (!is.na(x[i, "steps"]))
x[i, "steps"] <- tof_steps[which(tof_steps$interval) == x[i, "interval"], "average_steps"]
}
}
fill_na(ac)
actviity_filled <- fill_na(activity)
fill_na <- function(x) {
for (i in 1:nrow(x)) {
if (!is.na(x[i, "steps"]))
x[i, "steps"] <- tof_steps[which(tof_steps$interval == x[i, "interval"]), "average_steps"]
}
}
actviity_filled <- fill_na(activity)
nrow(filter(activity_filled, is.na(steps)))
